// ------------------------------------------------ //
// SSDS post-process wpipeline default config file  //
// ------------------------------------------------ //
// Default config options for all environments.

// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load report configuration
includeConfig 'conf/reports.config'

params {
	// PIPELINE DEPENDANCIES
	src = "${baseDir}/src"
	multiqc_configfile = "${baseDir}/multiqc_config.yaml"
	conda_intervene = "/home/demassyie/work/bin/miniconda3/envs/ssdspostprocess"

	// GENERAL PARAMETERS
	name = "SSDS_postprocess_pipeline"
	sample_name = "DMC1-ChIP"
	publishdir_mode = "copy"

	// OUTPUT PARAMETERS
	outdir = "${baseDir}/${params.name}.outdir/postprocess"
}

// PROFILES PARAMETERS
profiles {
  conda {
    docker.enabled = false
    singularity.enabled = false
    process.conda = "${baseDir}/environment.yml"
    conda.createTimeout = '5 h'
  }
  singularity {
    process.container = "${baseDir}/singularity.img"
    singularity.enabled = true
    singularity.autoMounts = true
    docker.enabled = false
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

