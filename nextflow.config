// ------------------------------------------------ //
// SSDS post-process wpipeline default config file  //
// ------------------------------------------------ //

// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load report configuration
includeConfig 'conf/reports.config'

params {
	// PIPELINE DEPENDANCIES
	src = "${baseDir}/bin"
        logo = "${baseDir}/assets/logo/sebimer.png"
	multiqc_configfile = "${baseDir}/conf/multiqc_config.yaml"

	// GENERAL PARAMETERS
	name = "SSDS_postprocess_pipeline"
	sample_name = "DMC1-ChIP"
	publishdir_mode = "copy"

	// OUTPUT PARAMETERS
	outdir = "${baseDir}/${params.name}.outdir/02_results"
}

// PROFILES PARAMETERS
profiles {
  singularity {
    docker.enabled = false
    singularity.enabled = true
    singularity.autoMounts = true
    process {
        withLabel : deeptools {
            container = "${baseDir}/containers/bigwig-box-1.0/bigwig-box-1.0.sif"
        }
        withName : annotatePeaks {
            container = "${baseDir}/containers/annotatepeaks-1.0/annotatepeaks_1.0.sif"
        }
        withName : plotIntersect {
            container = "${baseDir}/containers/upset-box-1.0/upset-box_1.0.sif"
        }
        withName : generalReport {
            container = "${baseDir}/containers/multiqc-box-1.0/multiqc-box_1.0.sif"
        }
     }
  }
  conda {
    singularity.enabled = false
    docker.enabled = false
    conda.createTimeout = '5 h'
    process {
        withLabel : deeptools {
            conda = "${baseDir}/containers/bigwig-box-1.0/environment.yml"
        }
        withName : annotatePeaks {
            conda = "${baseDir}/containers/annotatepeaks-1.0/environment.yml"
        }
        withName : plotIntersect {
            conda = "${baseDir}/containers/upset-box-1.0/environment.yml"
        }
        withName : generalReport {
            conda = "${baseDir}/containers/multiqc-box-1.0/environment.yml"
        }
    }
  }
  mamba {
    useMamba = true
    singularity.enabled = false
    docker.enabled = false
    conda.createTimeout = '5 h'
    process {
        withLabel : deeptools {
            conda = "${baseDir}/containers/bigwig-box-1.0/environment.yml"
        }
        withName : annotatePeaks {
            conda = "${baseDir}/containers/annotatepeaks-1.0/environment.yml"
        }
        withName : plotIntersect {
            conda = "${baseDir}/containers/upset-box-1.0/environment.yml"
        }
        withName : generalReport {
            conda = "${baseDir}/containers/multiqc-box-1.0/environment.yml"
        }
    }
  }
  docker {
    singularity.enabled = false
    docker.enabled = true
    process {
        withLabel : deeptools {
            container = "pauffret/bigwig-box:1.0"
        }
        withName : annotatePeaks {
            conda = "pauffret/annotatepeaks:1.0"
        }
        withName : plotIntersect {
            conda = "pauffret/upset-box:1.0"
        }
        withName : generalReport {
            conda = "pauffret/multiqc-box:1.0"
        }
    }
  }
}


//NEXTFLOW REPORT PARAMETERS
report {
    enabled = true
    overwrite = true
    file = "${baseDir}/${params.name}.outdir/00_reports/report.html"
}
 
timeline {
    enabled = true
    overwrite = true
    file = "${baseDir}/${params.name}.outdir/00_reports/timeline.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${baseDir}/${params.name}.outdir/00_reports/trace.txt"
}

dag {
   enabled = true
   overwrite = true
   file = "${baseDir}/${params.name}.outdir/00_reports/dag.png"
}

manifest {
   name = 'SSDS post process'
   author = 'Pauline Auffret'
   homePage = 'https://github.com/jajclement/ssdspostprocess'
   description = 'Compute and Plot general statistics for processed Single-Stranded-DNA-Sequencing (SSDS) data'
   mainScript = 'main.nf'
   nextflowVersion = '=20.10.0'
   version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

